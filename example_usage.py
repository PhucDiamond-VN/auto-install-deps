#!/usr/bin/env python3
"""
V√≠ d·ª• s·ª≠ d·ª•ng Auto C/C++ Dependencies Installer
"""

import sys
import os
from pathlib import Path

# Th√™m th∆∞ m·ª•c hi·ªán t·∫°i v√†o Python path
sys.path.insert(0, str(Path(__file__).parent))

from auto_install_cpp_deps import CppDepsInstaller

def example_basic_usage():
    """V√≠ d·ª• s·ª≠ d·ª•ng c∆° b·∫£n"""
    print("=== V√ç D·ª§ S·ª¨ D·ª§NG C∆† B·∫¢N ===")
    
    # T·∫°o instance installer
    installer = CppDepsInstaller()
    
    # Ch·∫°y c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß
    installer.run_full_installation()

def example_custom_installation():
    """V√≠ d·ª• c√†i ƒë·∫∑t t√πy ch·ªânh"""
    print("=== V√ç D·ª§ C√ÄI ƒê·∫∂T T·ª∞Y CH·ªàNH ===")
    
    installer = CppDepsInstaller()
    
    try:
        # T·∫°o th∆∞ m·ª•c c√†i ƒë·∫∑t
        installer.install_dir.mkdir(parents=True, exist_ok=True)
        
        print("1. C√†i ƒë·∫∑t compiler...")
        installer.install_compiler()
        
        print("2. C√†i ƒë·∫∑t CMake...")
        installer.install_cmake()
        
        print("3. C√†i ƒë·∫∑t Ninja...")
        installer.install_ninja()
        
        print("4. C√†i ƒë·∫∑t vcpkg...")
        installer.install_vcpkg()
        
        print("5. Ki·ªÉm tra c√†i ƒë·∫∑t...")
        success = installer.verify_installation()
        
        if success:
            print("‚úÖ C√†i ƒë·∫∑t th√†nh c√¥ng!")
        else:
            print("‚ö†Ô∏è M·ªôt s·ªë c√¥ng c·ª• ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
            
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
    finally:
        installer.cleanup()

def example_verification_only():
    """V√≠ d·ª• ch·ªâ ki·ªÉm tra c√†i ƒë·∫∑t"""
    print("=== V√ç D·ª§ KI·ªÇM TRA C√ÄI ƒê·∫∂T ===")
    
    installer = CppDepsInstaller()
    
    # Ch·ªâ ki·ªÉm tra c√°c c√¥ng c·ª• ƒë√£ c√†i ƒë·∫∑t
    success = installer.verify_installation()
    
    if success:
        print("‚úÖ T·∫•t c·∫£ c√¥ng c·ª• ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† s·∫µn s√†ng s·ª≠ d·ª•ng!")
    else:
        print("‚ö†Ô∏è M·ªôt s·ªë c√¥ng c·ª• ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c kh√¥ng t√¨m th·∫•y")
        print("Ch·∫°y c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß b·∫±ng: python auto_install_cpp_deps.py")

def example_specific_tools():
    """V√≠ d·ª• c√†i ƒë·∫∑t c√¥ng c·ª• c·ª• th·ªÉ"""
    print("=== V√ç D·ª§ C√ÄI ƒê·∫∂T C√îNG C·ª§ C·ª§ TH·ªÇ ===")
    
    installer = CppDepsInstaller()
    
    try:
        installer.install_dir.mkdir(parents=True, exist_ok=True)
        
        # Menu l·ª±a ch·ªçn
        print("Ch·ªçn c√¥ng c·ª• mu·ªën c√†i ƒë·∫∑t:")
        print("1. Ch·ªâ c√†i ƒë·∫∑t CMake")
        print("2. Ch·ªâ c√†i ƒë·∫∑t Ninja")
        print("3. Ch·ªâ c√†i ƒë·∫∑t vcpkg")
        print("4. Ch·ªâ c√†i ƒë·∫∑t Conan")
        print("5. C√†i ƒë·∫∑t t·∫•t c·∫£")
        
        choice = input("Nh·∫≠p l·ª±a ch·ªçn (1-5): ").strip()
        
        if choice == '1':
            print("C√†i ƒë·∫∑t CMake...")
            installer.install_cmake()
        elif choice == '2':
            print("C√†i ƒë·∫∑t Ninja...")
            installer.install_ninja()
        elif choice == '3':
            print("C√†i ƒë·∫∑t vcpkg...")
            installer.install_vcpkg()
        elif choice == '4':
            print("C√†i ƒë·∫∑t Conan...")
            installer.install_conan()
        elif choice == '5':
            print("C√†i ƒë·∫∑t t·∫•t c·∫£...")
            installer.run_full_installation()
        else:
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            return
        
        # Ki·ªÉm tra k·∫øt qu·∫£
        installer.verify_installation()
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
    finally:
        installer.cleanup()

def show_system_info():
    """Hi·ªÉn th·ªã th√¥ng tin h·ªá th·ªëng"""
    print("=== TH√îNG TIN H·ªÜ TH·ªêNG ===")
    
    installer = CppDepsInstaller()
    
    print(f"H·ªá ƒëi·ªÅu h√†nh: {installer.system}")
    print(f"Ki·∫øn tr√∫c: {installer.architecture}")
    print(f"Quy·ªÅn admin: {installer.is_admin}")
    print(f"Th∆∞ m·ª•c c√†i ƒë·∫∑t: {installer.install_dir}")
    print(f"Th∆∞ m·ª•c t·∫°m: {installer.temp_dir}")
    
    # Ki·ªÉm tra c√°c c√¥ng c·ª• c√≥ s·∫µn
    print("\nC√°c c√¥ng c·ª• c√≥ s·∫µn:")
    tools = ['python', 'pip', 'git', 'gcc', 'g++', 'cmake', 'ninja', 'vcpkg', 'conan']
    if installer.system == 'windows':
        tools.extend(['cl', 'msbuild', 'mingw32-make', 'gdb'])
    
    for tool in tools:
        if installer.run_command(f'which {tool}' if installer.system != 'windows' else f'where {tool}', check=False).returncode == 0:
            print(f"‚úÖ {tool}")
        else:
            print(f"‚ùå {tool}")

def interactive_menu():
    """Menu t∆∞∆°ng t√°c"""
    while True:
        print("\n" + "="*50)
        print("üîß AUTO C/C++ DEPENDENCIES INSTALLER üîß")
        print("="*50)
        print("1. C√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ dependencies")
        print("2. C√†i ƒë·∫∑t t√πy ch·ªânh")
        print("3. Ch·ªâ ki·ªÉm tra c√†i ƒë·∫∑t")
        print("4. C√†i ƒë·∫∑t c√¥ng c·ª• c·ª• th·ªÉ")
        print("5. Hi·ªÉn th·ªã th√¥ng tin h·ªá th·ªëng")
        print("6. Tho√°t")
        print("="*50)
        
        choice = input("Nh·∫≠p l·ª±a ch·ªçn (1-6): ").strip()
        
        if choice == '1':
            example_basic_usage()
        elif choice == '2':
            example_custom_installation()
        elif choice == '3':
            example_verification_only()
        elif choice == '4':
            example_specific_tools()
        elif choice == '5':
            show_system_info()
        elif choice == '6':
            print("üëã T·∫°m bi·ªát!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
        
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

def main():
    """H√†m ch√≠nh"""
    if len(sys.argv) > 1:
        if sys.argv[1] in ['-h', '--help']:
            print("""
V√≠ d·ª• s·ª≠ d·ª•ng Auto C/C++ Dependencies Installer

C√°ch s·ª≠ d·ª•ng:
    python example_usage.py [option]

Options:
    -h, --help      Hi·ªÉn th·ªã tr·ª£ gi√∫p n√†y
    --basic         Ch·∫°y v√≠ d·ª• c√†i ƒë·∫∑t c∆° b·∫£n
    --custom        Ch·∫°y v√≠ d·ª• c√†i ƒë·∫∑t t√πy ch·ªânh
    --verify        Ch·ªâ ki·ªÉm tra c√†i ƒë·∫∑t
    --specific      C√†i ƒë·∫∑t c√¥ng c·ª• c·ª• th·ªÉ
    --info          Hi·ªÉn th·ªã th√¥ng tin h·ªá th·ªëng
    --interactive   Ch·∫°y menu t∆∞∆°ng t√°c (m·∫∑c ƒë·ªãnh)

V√≠ d·ª•:
    python example_usage.py --basic
    python example_usage.py --verify
    python example_usage.py --interactive
            """)
            return
        elif sys.argv[1] == '--basic':
            example_basic_usage()
            return
        elif sys.argv[1] == '--custom':
            example_custom_installation()
            return
        elif sys.argv[1] == '--verify':
            example_verification_only()
            return
        elif sys.argv[1] == '--specific':
            example_specific_tools()
            return
        elif sys.argv[1] == '--info':
            show_system_info()
            return
    
    # M·∫∑c ƒë·ªãnh ch·∫°y menu t∆∞∆°ng t√°c
    interactive_menu()

if __name__ == "__main__":
    main()
